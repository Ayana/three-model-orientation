{"version":3,"sources":["ThreeSceneSample.js","App.js","index.js","assets/model.obj"],"names":["ThreeSceneSample","scene","camera","renderer","controls","animate","window","requestAnimationFrame","update","render","onWindowResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","useEffect","document","getElementById","addEventListener","remove","THREE","DeviceOrientationControls","ambientLight","add","pointLight","light","position","set","OBJLoader","load","MODEL","object","geometry","scale","material","map","mesh","helperGeometry","helperMaterial","transparent","wireframe","helper","antialias","setPixelRatio","devicePixelRatio","body","appendChild","domElement","init","id","App","className","ReactDOM","module","exports"],"mappings":"sNAgHeA,EAzGU,WACvB,IAAIC,EAAOC,EAAQC,EAAUC,EAmF7B,SAASC,IACPC,OAAOC,sBAAsBF,GAE7BD,EAASI,SACTL,EAASM,OAAOR,EAAOC,GAGzB,SAASQ,IACPR,EAAOS,OAASL,OAAOM,WAAaN,OAAOO,YAC3CX,EAAOY,yBAEPX,EAASY,QAAQT,OAAOM,WAAYN,OAAOO,aAE7C,OA9FAG,qBAAU,WACYC,SAASC,eAAe,eAChCC,iBACV,SACA,YAQJ,WACgBF,SAASC,eAAe,WAC9BE,SAERlB,EAAS,IAAImB,IACX,GACAf,OAAOM,WAAaN,OAAOO,YAC3B,EACA,MAGFT,EAAW,IAAIkB,IAA0BpB,GAEzCD,EAAQ,IAAIoB,IAGZ,IAAME,EAAe,IAAIF,IAAmB,QAAU,GACtDpB,EAAMuB,IAAID,GAEV,IAAME,EAAa,IAAIJ,IAAiB,SAAU,IAClDpB,EAAMuB,IAAIC,GAEV,IAAMC,EAAQ,IAAIL,IAAuB,QAAU,GACnDK,EAAMC,SAASC,IAAI,GAAI,GAAI,IAC3B3B,EAAMuB,IAAIE,IAGK,IAAIG,KACZC,KAAKC,KAAO,SAACC,GAClBA,EAAOL,SAASC,IAAI,GAAI,EAAG,GAC3B3B,EAAMuB,IAAIQ,GAmCZ7B,EAASM,OAAOR,EAAOC,MA/BvB,IAAI+B,EAAW,IAAIZ,IAA2B,IAAK,GAAI,IAEvDY,EAASC,OAAO,EAAG,EAAG,GAEtB,IAAIC,EAAW,IAAId,IAAwB,CACzCe,KAAK,IAAIf,KAAsBS,KAAK,oBAGlCO,EAAO,IAAIhB,IAAWY,EAAUE,GACpClC,EAAMuB,IAAIa,GAEV,IAAIC,EAAiB,IAAIjB,IAAwB,IAAK,IAAK,IAAK,EAAG,EAAG,GAClEkB,EAAiB,IAAIlB,IAAwB,CAE/CmB,aAAa,EACbC,WAAW,IAETC,EAAS,IAAIrB,IAAWiB,EAAgBC,GAC5CtC,EAAMuB,IAAIkB,IAGVvC,EAAW,IAAIkB,IAAoB,CAAEsB,WAAW,KACvCC,cAActC,OAAOuC,kBAC9B1C,EAASY,QAAQT,OAAOM,WAAYN,OAAOO,aAC3CI,SAAS6B,KAAKC,YAAY5C,EAAS6C,YAEnC1C,OAAOa,iBAAiB,SAAUT,GAAgB,GAnE9CuC,GACA5C,OAEF,MAuFF,oCACE,yBAAK6C,GAAG,WACN,4BAAQA,GAAG,eAAX,iB,MC5FOC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCNNC,IAAS5C,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,U,kBCJjDoC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.2ca1d03c.chunk.js","sourcesContent":["import React, { useEffect } from \"react\"\nimport * as THREE from \"three\"\nimport { DeviceOrientationControls } from \"three/examples/jsm/controls/DeviceOrientationControls.js\"\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader.js\"\n\nimport MODEL from \"./assets/model.obj\"\n\nconst ThreeSceneSample = () => {\n  let scene, camera, renderer, controls\n\n  useEffect(() => {\n    const startButton = document.getElementById(\"startButton\")\n    startButton.addEventListener(\n      \"click\",\n      function () {\n        init()\n        animate()\n      },\n      false\n    )\n  })\n\n  function init() {\n    var overlay = document.getElementById(\"overlay\")\n    overlay.remove()\n\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      1,\n      1100\n    )\n\n    controls = new DeviceOrientationControls(camera)\n\n    scene = new THREE.Scene()\n\n    // Add a light\n    const ambientLight = new THREE.AmbientLight(0x404040, 2)\n    scene.add(ambientLight)\n\n    const pointLight = new THREE.PointLight(0xffffff, 0.6)\n    scene.add(pointLight)\n\n    const light = new THREE.DirectionalLight(0x404040, 3)\n    light.position.set(10, 20, 20)\n    scene.add(light)\n\n    // Model setting\n    const loader = new OBJLoader()\n    loader.load(MODEL, (object) => {\n      object.position.set(0, -3, 0)\n      scene.add(object)\n      render()\n    })\n\n    var geometry = new THREE.SphereBufferGeometry(500, 60, 40)\n    // invert the geometry on the x-axis so that all of the faces point inward\n    geometry.scale(-1, 1, 1)\n\n    var material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(\"assets/sky.jpg\"),\n    })\n\n    var mesh = new THREE.Mesh(geometry, material)\n    scene.add(mesh)\n\n    var helperGeometry = new THREE.BoxBufferGeometry(100, 100, 100, 4, 4, 4)\n    var helperMaterial = new THREE.MeshBasicMaterial({\n      // color: 0xff00ff,\n      transparent: true,\n      wireframe: true,\n    })\n    var helper = new THREE.Mesh(helperGeometry, helperMaterial)\n    scene.add(helper)\n\n    // Render\n    renderer = new THREE.WebGLRenderer({ antialias: true })\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    document.body.appendChild(renderer.domElement)\n\n    window.addEventListener(\"resize\", onWindowResize, false)\n  }\n\n  // Render\n  function render() {\n    renderer.render(scene, camera)\n  }\n\n  // Animate\n  function animate() {\n    window.requestAnimationFrame(animate)\n\n    controls.update()\n    renderer.render(scene, camera)\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n  return (\n    <>\n      <div id=\"overlay\">\n        <button id=\"startButton\">Start Demo</button>\n      </div>\n    </>\n  )\n}\nexport default ThreeSceneSample\n","import React from \"react\"\n// import ThreeScene from './ThreeScene';\n// import ThreeSceneControls from \"./ThreeSceneControls\";\n// import ThreeSceneOrientation from \"./ThreeSceneOrientation\";\nimport ThreeSceneSample from \"./ThreeSceneSample\"\nimport \"./style.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThreeSceneSample />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/model.dfebfcc1.obj\";"],"sourceRoot":""}